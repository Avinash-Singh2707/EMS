//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel.DataAnnotations;
namespace EMS.Models
{
    public class AgeRangeAttribute : ValidationAttribute
    {
        private readonly int _minAge;
        private readonly int _maxAge;

        public AgeRangeAttribute(int minAge, int maxAge)
        {
            _minAge = minAge;
            _maxAge = maxAge;
        }

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is DateTime dateOfBirth)
            {
                var age = CalculateAge(dateOfBirth);
                if (age < _minAge)
                {
                    return new ValidationResult($"Employee must be at least {_minAge} years old.");
                }
                else if (age > _maxAge)
                {
                    return new ValidationResult($"Employee age cannot exceed {_maxAge} years.");
                }
            }

            return ValidationResult.Success;
        }

        private int CalculateAge(DateTime dateOfBirth)
        {
            var today = DateTime.Today;
            var age = today.Year - dateOfBirth.Year;
            if (dateOfBirth.Date > today.AddYears(-age)) age--;
            return age;
        }
    }
    public class DateOfBirthBeforeJoiningAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var joiningDate = (DateTime?)value;
            var dateOfBirth = (DateTime?)validationContext.ObjectType.GetProperty("Emp_Date_of_Birth").GetValue(validationContext.ObjectInstance);

            // Check if date of birth is provided
            if (!dateOfBirth.HasValue)
            {
                return new ValidationResult("Date of birth is required.");
            }

            // Check if date of joining is provided
            if (!joiningDate.HasValue)
            {
                return new ValidationResult("Date of joining is required.");
            }

            if (joiningDate <= dateOfBirth)
            {
                return new ValidationResult("Date of joining must be greater than date of birth.");
            }

            return ValidationResult.Success;
        }
    }
}


